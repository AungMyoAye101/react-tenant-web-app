/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CustomerserviceIndexRouteImport } from './routes/customerservice/index'
import { Route as ContractIndexRouteImport } from './routes/contract/index'
import { Route as BillingIndexRouteImport } from './routes/billing/index'
import { Route as AuthSigupRouteImport } from './routes/auth/sigup'
import { Route as AuthLoginRouteImport } from './routes/auth/login'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomerserviceIndexRoute = CustomerserviceIndexRouteImport.update({
  id: '/customerservice/',
  path: '/customerservice/',
  getParentRoute: () => rootRouteImport,
} as any)
const ContractIndexRoute = ContractIndexRouteImport.update({
  id: '/contract/',
  path: '/contract/',
  getParentRoute: () => rootRouteImport,
} as any)
const BillingIndexRoute = BillingIndexRouteImport.update({
  id: '/billing/',
  path: '/billing/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSigupRoute = AuthSigupRouteImport.update({
  id: '/auth/sigup',
  path: '/auth/sigup',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/sigup': typeof AuthSigupRoute
  '/billing': typeof BillingIndexRoute
  '/contract': typeof ContractIndexRoute
  '/customerservice': typeof CustomerserviceIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/sigup': typeof AuthSigupRoute
  '/billing': typeof BillingIndexRoute
  '/contract': typeof ContractIndexRoute
  '/customerservice': typeof CustomerserviceIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/sigup': typeof AuthSigupRoute
  '/billing/': typeof BillingIndexRoute
  '/contract/': typeof ContractIndexRoute
  '/customerservice/': typeof CustomerserviceIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth/login'
    | '/auth/sigup'
    | '/billing'
    | '/contract'
    | '/customerservice'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/login'
    | '/auth/sigup'
    | '/billing'
    | '/contract'
    | '/customerservice'
  id:
    | '__root__'
    | '/'
    | '/auth/login'
    | '/auth/sigup'
    | '/billing/'
    | '/contract/'
    | '/customerservice/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthSigupRoute: typeof AuthSigupRoute
  BillingIndexRoute: typeof BillingIndexRoute
  ContractIndexRoute: typeof ContractIndexRoute
  CustomerserviceIndexRoute: typeof CustomerserviceIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/customerservice/': {
      id: '/customerservice/'
      path: '/customerservice'
      fullPath: '/customerservice'
      preLoaderRoute: typeof CustomerserviceIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contract/': {
      id: '/contract/'
      path: '/contract'
      fullPath: '/contract'
      preLoaderRoute: typeof ContractIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/billing/': {
      id: '/billing/'
      path: '/billing'
      fullPath: '/billing'
      preLoaderRoute: typeof BillingIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/sigup': {
      id: '/auth/sigup'
      path: '/auth/sigup'
      fullPath: '/auth/sigup'
      preLoaderRoute: typeof AuthSigupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthSigupRoute: AuthSigupRoute,
  BillingIndexRoute: BillingIndexRoute,
  ContractIndexRoute: ContractIndexRoute,
  CustomerserviceIndexRoute: CustomerserviceIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
